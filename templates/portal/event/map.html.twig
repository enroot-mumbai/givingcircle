<!DOCTYPE html>
<html>

<head>
    <title>Places Search Box</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDWr6Sw28gWe3seaJvyVjichem9hrTNNxM&callback=initAutocomplete&libraries=places&v=weekly"
            defer></script>
    <style type="text/css">
        /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
        #map {
            height: 100%;
        }

        /* Optional: Makes the sample page fill the window. */
        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #description {
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
        }

        #infowindow-content .title {
            font-weight: bold;
        }

        #infowindow-content {
            display: none;
        }

        #map #infowindow-content {
            display: inline;
        }

        .pac-card {
            margin: 10px 10px 0 0;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            background-color: #fff;
            font-family: Roboto;
        }

        #pac-container {
            padding-bottom: 12px;
            margin-right: 12px;
        }

        .pac-controls {
            display: inline-block;
            padding: 5px 11px;
        }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

        #pac-input {
            background-color: #fff;
            text-overflow: ellipsis;
            width: 400px;
            margin: 0 auto;
            font-size: 14px;
            font-weight: 500;
            line-height: 3.7;
            border: solid 1px #707070;
            border-radius: 25px;
            color: #000;
            padding-bottom: 10px;
            height: 50px;
            text-indent: 10px;
            padding: 10px;
        }

        #pac-input:focus {
            border-color: #4d90fe;
        }

        #title {
            color: #fff;
            background-color: #4d90fe;
            font-size: 25px;
            font-weight: 500;
            padding: 6px 12px;
        }

        #target {
            width: 345px;
        }
    </style>
    <script>
        // This example adds a search box to a map, using the Google Place Autocomplete
        // feature. People can enter geographical searches. The search box will return a
        // pick list containing a mix of places and predicted search terms.
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        function initAutocomplete() {
            const map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 23.32, lng: 78.00 },
            zoom: 5,
                mapTypeId: "roadmap",
            });
            // Create the search box and link it to the UI element.
            const input = document.getElementById("pac-input");
            const searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            // Bias the SearchBox results towards current map's viewport.
            map.addListener("bounds_changed", () => {
                searchBox.setBounds(map.getBounds());
            });
            let markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener("places_changed", () => {
                const places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                populateAddress(); // added to load address to our inline input box
                populateLatLong(places[0].geometry.location.lat(), places[0].geometry.location.lng());


                // Clear out the old markers.
                markers.forEach((marker) => {
                    marker.setMap(null);
                });
                markers = [];
                // For each place, get the icon, name and location.
                const bounds = new google.maps.LatLngBounds();
                places.forEach((place) => {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    const icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25),
                    };
                    // Create a marker for each place.
                    markers.push(
                        new google.maps.Marker({
                            map,
                            icon,
                            title: place.name,
                            position: place.geometry.location,
                        })
                    );

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }

        function populateAddress() {
            $("#eventOnSiteAddress1").val($("#pac-input").val());
        }
        function populateLatLong(lat, long) {
            $("#eventOnSiteLatitude").val(lat);
            $("#eventOnSiteLongitude").val(long);
        }

    </script>
</head>

<body>

<div id="map">
</div>

{% set address = '' %}
{% set latitude = '' %}
{% set longitude = '' %}
{% if onSiteAddresses is not empty %}
    {% set address = onSiteAddresses.eventOnSiteAddress1 %}
    {% set latitude = onSiteAddresses.eventOnSiteLocationLatitude %}
    {% set longitude = onSiteAddresses.eventOnSiteLocationLongitude %}
{% endif %}

<input id="pac-input" class="controls" type="text" placeholder="Type City, Pin Code or Address Here..." />
<div class="savedAddress">
    <i class="fas fa-map-marker-alt"></i>
    <input type="text" name="eventOnSiteAddress1" id="eventOnSiteAddress1" readonly="readonly" value="{{ address }}" placeholder="Site Address">
    <input type="hidden" name="eventOnSiteLatitude" id="eventOnSiteLatitude" value="{{ latitude }}">
    <input type="hidden" name="eventOnSiteLongitude" id="eventOnSiteLongitude" value="{{ longitude }}">
    <a href="#" onclick="$('#eventOnSiteAddress1').removeAttr('readOnly');" class="edit-address"><i class="fas fa-pencil-alt"></i> Edit</a>
{#    <input type="text" name="eventOnSitePinCode" id="eventOnSitePinCode" placeholder="Pin Code">#}
</div>
</body>

</html>